drop trigger if exists check_cluster_insert;
drop trigger if exists check_cluster_update;
drop trigger if exists course_time_insert;
drop trigger if exists check_course_time_update;
drop table if exists teaches;
drop table if exists section;
drop table if exists instructor_time_conflict;
drop table if exists likely_course_conflicts;
drop table if exists non_instructional_load;
drop table if exists timeslot;
drop table if exists instructor;
drop table if exists course;
create table instructor (first_name varchar(20) not null, last_name varchar(20) not null, email varchar(50) not null, id int(8) not null, desired_load decimal(3,1) not null check (desired_load >= 0), primary key (id), unique key (email));
create table course (course_id varchar(9) not null, department varchar(20) not null, num_credits int(2) not null check (num_credits > 0), title varchar(60) not null, primary key (course_id));
create table section (course_id varchar(9) not null, sec_id int(1) not null check (sec_id >= 0), semester varchar(7) not null check (semester in ('fall', 'interim', 'spring', 'summer')), year int(4) not null, primary key (course_id, sec_id, semester, year), foreign key (course_id) references course (course_id) on delete no action on update cascade);
create table timeslot (mod_slot varchar(3) not null, start_time varchar(5) not null, end_time varchar(5) not null, primary key (mod_slot, start_time, end_time));
create table teaches (id int(8) not null, course_id varchar(9) not null, sec_id int(1) not null, semester varchar(7) not null, year int(4) not null, mod_slot varchar(3), primary key (id, course_id, sec_id, semester, year), foreign key (id) references instructor (id) on delete no action on update cascade, foreign key (course_id, sec_id, semester, year) references section (course_id, sec_id, semester, year) on delete no action on update cascade, foreign key (mod_slot) references timeslot (mod_slot) on delete no action on update cascade);
create table non_instructional_load (id int(8) not null, task varchar(20) not null, teu decimal(3,1) not null check (teu >= 0), semester varchar(7) not null, year int(4) not null, primary key (id, task, semester, year), foreign key (id) references instructor (id) on delete no action on update cascade);
create table instructor_time_conflict (id int(8) not null, mod_slot varchar(3) not null, primary key (id, mod_slot), foreign key (id) references instructor (id) on delete no action on update cascade, foreign key (mod_slot) references timeslot (mod_slot) on delete cascade on update cascade);
create table likely_course_conflicts (course_id varchar(9) not null, cluster_id int(2) not null check (cluster_id > 0), primary key (course_id, cluster_id), foreign key (course_id) references course (course_id) on delete no action on update cascade);
CREATE TRIGGER check_cluster_insert BEFORE INSERT on teaches FOR EACH ROW BEGIN IF EXISTS (SELECT * FROM teaches WHERE id=NEW.id AND mod_slot=NEW.mod_slot AND (SELECT cluster_id FROM likely_course_conflicts WHERE course_id=NEW.course_id)) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='The course is scheduled to overlap with other course in the same cluster'; END IF; END;
CREATE TRIGGER check_cluster_update BEFORE UPDATE on teaches FOR EACH ROW BEGIN IF EXISTS (SELECT * FROM teaches WHERE id=NEW.id AND mod_slot=NEW.mod_slot AND (SELECT clutser_id FROM likely_course_conflicts WHERE course_id=NEW.course_id)) THEN INSERT INTO teaches (id, course_id, sec_id, semester, year, mod_slot) VALUES (NEW.id, NEW.course_id, NEW.sec_id, NEW.semester, NEW.year, NEW.mod_slot); SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='The course is scheduled to overlap with other course in the same cluster'; ELSE INSERT INTO teaches (id, course_id, sec_id, semester, year, mod_slot) VALUES (NEW.id, NEW.course_id, NEW.sec_id, NEW.semester, NEW.year, NEW.mod_slot); END IF; END;
CREATE TRIGGER check_course_time_insert BEFORE INSERT on teaches FOR EACH ROW BEGIN IF EXISTS (SELECT id FROM teaches WHERE id = NEW.id AND course_id = NEW.course_id AND sec_id = NEW.sec_id AND semester = NEW.semester AND year = NEW.year AND mod_slot != 'WEB') THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='This professor is already scheduled for this mod'; END IF; END;
CREATE TRIGGER check_course_time_update BEFORE UPDATE on teaches FOR EACH ROW BEGIN IF EXISTS (SELECT id FROM teaches WHERE id = NEW.id AND course_id = NEW.course_id AND sec_id = NEW.sec_id AND semester = NEW.semester AND year = NEW.year AND mod_slot != 'WEB') THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='This professor is already scheduled for this mod'; END IF; END;
CREATE TRIGGER check_mod_interim_insert BEFORE INSERT on teaches BEGIN IF NEW.mod_slot = 'AA' OR NEW.mod_slot = 'BB' AND NEW.semester != 'interim' THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='This course is not scheduled for a legal semester for this timeslot'; ELSEIF (NEW.semester = 'interim' AND NEW.mod_slot != 'AA') or (NEW.semester = 'interim' AND NEW.mod_slot != 'BB') THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='This course is not scheduled for a legal timeslot this semester'; END IF; END;
CREATE TRIGGER check_mod_interim_update BEFORE UPDATE on teaches BEGIN IF NEW.mod_slot = 'AA' OR NEW.mod_slot = 'BB' AND NEW.semester != 'interim' THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='This course is not scheduled for a legal semester for this timeslot'; ELSEIF (NEW.semester = 'interim' AND NEW.mod_slot != 'AA') or (NEW.semester = 'interim' AND NEW.mod_slot != 'BB') THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT='This course is not scheduled for a legal timeslot this semester'; END IF; END;
insert into timeslot values ("A3", "08:00", "08:50"), ("A4", "07:40", "08:50"), ("B3", "09:00", "09:50"), ("B4", "09:00", "10:10"), ("C3", "11:10", "12:00"), ("C4", "11:10", "12:20"), ("D3", "12:30", "13:20"), ("D4", "12:30", "13:40"), ("E3", "13:50", "14:40"), ("F3", "14:50", "15:40"), ("F4", "14:50", "16:00"), ("G3", "08:00", "09:15"), ("H3", "09:25", "10:40"), ("H4", "09:25", "11:05"), ("I3", "12:15", "13:30"), ("I4", "12:15", "13:55"), ("J3", "14:25", "15:20"), ("J4", "14:25", "15:45"), ("K3", "16:10", "17:25"), ("K4", "16:10", "17:50"), ("M3", "18:00", "21:00"), ("M4", "18:00", "22:00"), ("T3", "18:00", "21:00"), ("T4", "18:00", "22:00"), ("W3", "18:00", "22:00"), ("W4", "18:00", "21:00"), ("R3", "18:00", "21:00"), ("R4", "18:00", "22:00"), ("AA", "08:00", "10:45"), ("BB", "13:00", "15:45"), ("WEB", "00:00", "23:59");
